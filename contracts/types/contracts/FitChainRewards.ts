/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface FitChainRewardsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claimRewards"
      | "claimedSteps"
      | "etnToken"
      | "fundContract"
      | "getContractBalance"
      | "getPotentialReward"
      | "getUnclaimedSteps"
      | "owner"
      | "recordSteps"
      | "userSteps"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "RewardClaimed" | "StepsRecorded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "claimRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimedSteps",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "etnToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fundContract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPotentialReward",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnclaimedSteps",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recordSteps",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userSteps",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimedSteps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "etnToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPotentialReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnclaimedSteps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recordSteps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userSteps", data: BytesLike): Result;
}

export namespace RewardClaimedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StepsRecordedEvent {
  export type InputTuple = [user: AddressLike, steps: BigNumberish];
  export type OutputTuple = [user: string, steps: bigint];
  export interface OutputObject {
    user: string;
    steps: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FitChainRewards extends BaseContract {
  connect(runner?: ContractRunner | null): FitChainRewards;
  waitForDeployment(): Promise<this>;

  interface: FitChainRewardsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claimRewards: TypedContractMethod<[], [void], "nonpayable">;

  claimedSteps: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  etnToken: TypedContractMethod<[], [string], "view">;

  fundContract: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getContractBalance: TypedContractMethod<[], [bigint], "view">;

  getPotentialReward: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  getUnclaimedSteps: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  recordSteps: TypedContractMethod<
    [user: AddressLike, steps: BigNumberish],
    [void],
    "nonpayable"
  >;

  userSteps: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claimRewards"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimedSteps"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "etnToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "fundContract"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getContractBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPotentialReward"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUnclaimedSteps"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "recordSteps"
  ): TypedContractMethod<
    [user: AddressLike, steps: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userSteps"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getEvent(
    key: "RewardClaimed"
  ): TypedContractEvent<
    RewardClaimedEvent.InputTuple,
    RewardClaimedEvent.OutputTuple,
    RewardClaimedEvent.OutputObject
  >;
  getEvent(
    key: "StepsRecorded"
  ): TypedContractEvent<
    StepsRecordedEvent.InputTuple,
    StepsRecordedEvent.OutputTuple,
    StepsRecordedEvent.OutputObject
  >;

  filters: {
    "RewardClaimed(address,uint256)": TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;
    RewardClaimed: TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;

    "StepsRecorded(address,uint256)": TypedContractEvent<
      StepsRecordedEvent.InputTuple,
      StepsRecordedEvent.OutputTuple,
      StepsRecordedEvent.OutputObject
    >;
    StepsRecorded: TypedContractEvent<
      StepsRecordedEvent.InputTuple,
      StepsRecordedEvent.OutputTuple,
      StepsRecordedEvent.OutputObject
    >;
  };
}
